% getMinFromList(l1..ln, min) = {  min, n = 0
% 								   getMinFromList(l2..ln,l1), l1 < min
% 								   getMinFromList(l2..ln,min), otherwise
% 	getMinFromList(L - List, Min - integer)
% 	(i,o)
getMinFromList([Min],Min).
getMinFromList([H|T],Min) :- getMinFromList(T,Min1),Min1 < H, Min is Min1.
getMinFromList([H|T],Min) :- getMinFromList(T,Min1),Min1 >= H, Min is H.

%deleteAllOccurences(l1..ln,N) {	[] , n = 0
%									l1 U deleteAllOccurences(l2..ln,N), l1 != N
%									deleteAllOccurences(l2..ln,N), l1 == N
%	deleteAllOccurences(L-list, N-integer, R - List)
%	(i,i,o)
deleteAllOccurences([],_,[]).
deleteAllOccurences([H|T],N,R) :- H =:= N, deleteAllOccurences(T,N,R).
deleteAllOccurences([H|T],N,R) :- H =\= N, deleteAllOccurences(T,N,R1),R = [H|R1].

%deleteFirstOccurency(l1..ln,N) {	[] , n = 0
%									l1 U deleteAllOccurences(l2..ln,N), l1 != N
%									[l2..ln], l1 == N
%	deleteFirstOccurency(L-list, N-integer, R - List)
%	(i,i,o)
deleteFirstOccurency([],_,[]).
deleteFirstOccurency([H|T],N,T) :- H =:= N.
deleteFirstOccurency([H|T],N,R) :- H =\= N, deleteFirstOccurency(T,N,R1),R = [H|R1].

% p1a(l1..ln) = {	[],n=0
%					getMinFromList(l1..ln,l1) U p1a(deleteAllOccurences(l1..ln,getMinFromList(l1..ln,l1)), otherwise
% p1a(L - list, R - list)
% (i,o)
p1a([],[]).
p1a(L,R) :- getMinFromList(L,M),deleteAllOccurences(L,M,R1),p1a(R1,R2), R = [M|R2].     

% p1b(L-het List, R-hetList)
% (i,o)
p1b([],[]).
p1b([H|T],R) :- is_list(H),!, p1a(H,R1),p1b(T,R2), R = [R1|R2].
p1b([H|T],R) :- p1b(T,R1), R = [H|R1].
    
% p2a(l1..ln) = {	[],n=0
% 					getMinFromList(l1..ln,l1) U p2a(deleteFirstOccurency(l1..ln,getMinFromList(l1..ln,l1)), otherwise
% p2a(L - list, R - list)
% (i,o)
p2a([],[]).
p2a(L,R) :- getMinFromList(L,M),deleteFirstOccurency(L,M,R1),p2a(R1,R2),R=[M|R2].

% p2b(L-het List, R - het List)
% (i,o)
p2b([],[]).
p2b([H|T],R) :- is_list(H),!,p2a(H,R1),p2b(T,R2), R = [R1|R2].
p2b([H|T],R) :- p2b(T,R1), R = [H|R1].

% p3a(List, List, List)
% (i,i,o)
p3a([],T,T).
p3a(T,[],T).
p3a([H1,H2|T1],[H3|T2],R) :- H1 =:= H2,!,p3a([H1|T1],[H3|T2],R1),R= R1.
p3a([H1|T1],[H2,H3|T2],R) :- H2 =:= H3,!,p3a([H1|T1],[H2|T2],R1),R= R1.
p3a([H1|T1],[H2|T2],R) :- H1 < H2,!,p3a(T1,[H2|T2],R1),R=[H1|R1].
p3a([H1|T1],[H2|T2],R) :- H1 > H2,!,p3a([H1|T1],T2,R1),R=[H2|R1].
p3a([H1|T1],[H2|T2],R) :- H1 =:= H2,p3a([H1|T1],T2,R1),R = R1.

% p3b(List,List)
% (i,o)
p3b([],[]).
p3b([H|T],R) :- is_list(H),!,p3b(T,R1),p3a(H,R1,R).
p3b([_|T],R) :- p3b(T,R).

%getLastElement(List,integer)
%(i,o)
getLastElement([],0).
getLastElement([E],E).
getLastElement([_|T],E) :- getLastElement(T,E).
%deleteLastElement(List, List)
%(i,o)
deleteLastElement([],[]).
deleteLastElement([_],[]).
deleteLastElement([H|T],L) :- deleteLastElement(T,L1),L = [H|L1].
%modulo(int,int,int)
%(i,i,o)
modulo(I,D,I) :- D > I.
modulo(I,D,R) :- D =< I, I1 is I - D, modulo(I1,D,R).
%divid(int,int,int)
%(i,i,o)
divid(I,D,0) :- D > I.
divid(I,D,R) :- D =< I, I1 is I - D, divid(I1,D,R1), R is R1 + 1.
% p4a ( List, List, List, integer, List )
% p4a ( i, i, i, i, 0)
fp4a([],[],R,0,R).
fp4a([],[],R,1,[1|R]).
fp4a(T1,[],R,Rest,Rez) :- getLastElement(T1,M1),deleteLastElement(T1,L1),H is M1+Rest,
    				modulo(H,10,H1),divid(H,10,Rest1),fp4a(L1,[],[H1|R],Rest1,Rez).
fp4a([],T1,R,Rest,Rez) :- getLastElement(T1,M1),deleteLastElement(T1,L1),H is M1+Rest,
    				modulo(H,10,H1),divid(H,10,Rest1),fp4a([],L1,[H1|R],Rest1,Rez).
fp4a(T1,T2,R,Rest,Rez) :- getLastElement(T1,M1),getLastElement(T2,M2),
    				deleteLastElement(T1,L1),deleteLastElement(T2,L2), H is M1+M2+Rest,
    				modulo(H,10,H1),divid(H,10,Rest1),fp4a(L1,L2,[H1|R],Rest1,Rez).

p4a(L1,L2,R) :- fp4a(L1,L2,[],0,R).



drbl(A1,B1,0) :- A1 < B1.
drbl(A1,B1,C1) :- A1 > B1, D1 is A1 - B1, drbl(D1,B1,C2), C1 is C2+1.
%
%%%prod(l1..ln,d,r) {	
%			[], n = 0
%			(l1*d+r)%10 U prod(l2..ln,d,(l1*d+r)/10), otherwise
prod([],_,0,[]).
prod([H|T],D,J,F):- prod(T,D,R,F1), L is H*D+R,drbl(L,10,J),
    				I is mod(H*D+R,10),
    				F = [I|F1].

p6a(L,D,R) :- prod(L,D,Rest,R1), Rest > 0, R = [Rest|R1].
p6a(L,D,R) :- prod(L,D,Rest,R), Rest =:= 0.

invertList([],L,L).
invertList([H|T],L,C) :- invertList(T,[H|L],C).

getPosOfMaxElement([],_,_,Col,Col).
getPosOfMaxElement([H|T],M,C,_,D) :- 
    			H > M,C1 is C + 1,
    			getPosOfMaxElement(T,H,C1,[C1],D).
getPosOfMaxElement([H|T],M,C,Col,D):- H < M, C1 is C + 1,
    			getPosOfMaxElement(T,M,C1,Col,D).
getPosOfMaxElement([H|T],M,C,Col,D):- H =:= M, C1 is C + 1,
    			getPosOfMaxElement(T,M,C1,[C1|Col],D).

p6b([],[]).
p6b([[H1|H]|T],R) :- !,getPosOfMaxElement(H,H1,1,[1],R1), invertList(R1,[],R2), p6b(T,R3), R=[R2|R3].
p6b([H|T],R) :- p6b(T,R1),R = [H|R1].



%% ex 7

% maxpos(l1..ln,pos,maximum) { 
% 		[], n = 0
% 		[pos], l1 > maximum
% 		pos U maxpos(l2..ln), l1 == maximum
% 		maxpos(l2..ln), otherwise
% () 		
maxpos([],_,_,Col,Col).
maxpos([H|T],C,Maxim,_,R) :- H > Maxim, C1 is C + 1,
    		maxpos(T,C1,H,[C1],R).
maxpos([H|T],C,Maxim,Col,R) :- H =:= Maxim, C1 is C + 1,
    		maxpos(T,C1,H,[C1|Col],R).
maxpos([H|T],C,Maxim,Col,R) :- H < Maxim, C1 is C + 1,
    		maxpos(T,C1,Maxim,Col,R).

invertList([],L,L).
invertList([H|T],C,L) :- invertList(T,[H|C],L).


p7a([H|T],R1) :- maxpos(T,1,H,[1],R),invertList(R,[],R1).

p7b([],[]).
p7b([H|T],R) :- is_list(H),!, p7a(H,R1), p7b(T,R2), R = [R1|R2].
p7b([H|T],R) :- p7b(T,R1), R = [H|R1].

%ex 8

% successor(l1..ln,r) = {	
% 		[], n = 0.
% 		successor(l2..ln,(l1+1+r)/10) U (l1+1+r)%10,otherwise
% 
% (i,o,o)
successor([H],R,[J]) :- R is div(H+1,10), J is mod(H+1,10).
successor([H|T],R,L) :- successor(T,R1,L1), 
    		R is div(H+R1,10), J is mod(H+R1,10),L = [J|L1].

p8a(L,R1) :- successor(L,Re,R), Re > 0, R1 = [Re|R].
p8a(L,R) :- successor(L,Re,R), Re =:= 0.

p8b([],[]).
p8b([H|T],R) :- is_list(H),!, p8a(H,R1), p8b(T,R2),R=[R1|R2].
p8b([H|T],R) :- p8b(T,R1),R = [H|R1].

% p9a(l1..ln,e,pos,c) = {
% 			[], n = 0
% 			l1 U p9a(l2..ln,e,pos+1,c), pos != c
% 			l1 U e U p9a(l2..ln,e,pos+1,c+c+1), pos == c
% (i,i,i,i,o)
p9a([],_,_,_,[]).
p9a([H|T],E,Pos,C,R) :- Pos1 is Pos + 1, Pos1 =\= C, 
    			p9a(T,E,Pos1,C,R1), R = [H|R1].
p9a([H|T],E,Pos,C,R) :- Pos1 is Pos + 1, Pos1 =:= C, 
    		C1 is C+C+1,p9a(T,E,Pos1,C1,R1), R = [H,E|R1].

p9b([],_,[]).
p9b([H|T],L,R) :- is_list(H),!,p9a(H,L,0,1,R1), p9b(T,L,R2),R = [R1|R2].
p9b([H|T],_,R) :- p9b(T,H,R1), R = [H|R1].


getMax([],Col,Col).
getMax([H|T],Col,R) :- H > Col, getMax(T,H,R).
getMax([H|T],Col,R) :- H =< Col, getMax(T,Col,R).


p11a([],_,_,[]).
p11a([H|T],E,L,R) :- E =\= H, p11a(T,E,L,R1),R=[H|R1].
p11a([H|T],E,L,R) :- E =:= H, p11a(T,E,L,R1),R=[L|R1].
%(ii,00)
p11b([],Col,Col,[]).
p11b([[H1|H]|T],Col,M,R) :- !, 
    p11b(T,Col,M,R1),getMax(H,H1,R2),p11a([H1|H],M,R2,R3),R=[R3|R1].
p11b([H|T],Col,M,R) :- H > Col,p11b(T,H,M,R1),R=[H|R1].
p11b([H|T],Col,M,R) :- H =< Col,p11b(T,Col,M,R1),R=[H|R1].

% divisors(l,i) = { 
% 		[],i = 0
% 		i U divisors(l,i-1), l%i == 0
% 		divisors(l,i-1), l%i != 0
% divisors(int,int,list)
% (i,i,o)
divisors(H,L,[]) :- H =< L.
divisors(H,I,R) :- mod(H,I) =:= 0, I1 is I + 1,
    				divisors(H,I1,R1), R = [I|R1].
divisors(H,I,R) :- mod(H,I) =\= 0, I1 is I + 1,
    				divisors(H,I1,R). 

%concat(l1..ln,f1..fm)
%		l1..ln , m=0
%		f1 U concat(l1..ln,f2..fm), otherwise
%concat(List,List,List)
%(i,i,o)
concat(T,[],T).
concat(L,[H|T],R) :- concat(L,T,R1),R = [H|R1]. 

%addDiv(l1..ln) {
%			[] , n = 0
%			l1 U divisors(l1,l1-1) U addDiv(l2..ln), otherwise
%addDiv(List,List)
%(i,o)
addDiv([],[]).
addDiv([H|T],R):-addDiv(T,R1),
    		divisors(H,2,R2),concat(R1,R2,R3),R = [H|R3].

p12b([],[]).
p12b([H|T],R) :- is_list(H),!,addDiv(H,R1),p12b(T,R2),R = [R1|R2].
p12b([H|T],R) :- p12b(T,R1),R = [H|R1].

%removeCons(l1..ln,back)
%			[], n = 0
%			removeCons(l2..ln,l1), back == l1-1
%			l1 U removeCons(l2..ln,l1)
%removeCons(List,int,List)
%(i,i,o)
removeCons([E],L,[]):- E is L+1,!.
removeCons([E],_,[E]).
removeCons([H1,H2|T],_,R):- H1 is H2-1, !,
    removeCons([H2|T],H1,R).
removeCons([H1,H2|T],L,R):- H1 is L+1,!,
    removeCons([H2|T],H1,R).
removeCons([H1,H2|T],_,R):- 
    removeCons([H2|T],H1,R1), R = [H1|R1].
% p13a(l1..ln) = removeCons(l1..ln,l1)
%p13a(List,List) = removeCons(List,int,List)
%(i,0)
p13a([H|T],R) :- removeCons([H|T],H,R).

%p13b(l1..ln) = {
%			[], n = 0
%			p13a(l1) U p13b(l2..ln), l1 is list
%			l1 U p13b(l2..ln), otherwise
%p13b(List,List)
%(i,o)
p13b([],[]).
p13b([H|T],R) :- is_list(H),!,p13a(H,R1),p13b(T,R2),R=[R1|R2].
p13b([H|T],R) :- p13b(T,R1),R=[H|R1].

%longSeq(l1..ln,back,Temp)={
%	[], n=0
%	longSeq(l2..ln,l1,l1 U Temp), l1%2=0 && back+2=l1
%	longSeq(l2..ln,l1,Temp), l1%2!=0 || back+2 != l1
%longSeq(List,int,List,int,List,int,List)
%(i,i,i,i,i,i,o)
longSeq([],_,R,_,[],_,R).
longSeq([],_,_,_,R,_,R).
longSeq([H,H2|T],L,Temp,N1,Fin,N2,R):- mod(H,2) =:= 0,
    H is L+2,H2 is H + 2,!,Temp1 = [L|Temp],N3 is N1+1, 
    longSeq([H2|T],H,Temp1,N3,Fin,N2,R).
longSeq([H|T],L,Temp,N1,_,N2,R):- mod(H,2) =:= 0,
    H is L+2,N3 is N1+2,N3 > N2,!,Temp1 = [H,L|Temp],
    longSeq(T,H,[],0,Temp1,N3,R).
longSeq([H|T],L,_,_,Fin,N2,R):- mod(H,2) =:= 0,
    H is L+2,!,longSeq(T,H,[],0,Fin,N2,R).
longSeq([H|T],_,_,_,_,N2,R):- mod(H,2) =:= 0,
    N2 is 0,!,longSeq(T,H,[],0,[H],1,R).
longSeq([H|T],_,Temp,N1,Fin,N2,R):-longSeq(T,H,Temp,N1,Fin,N2,R).

p14a(L,R) :- longSeq(L,1,[],0,[],0,R).

p14b([],[]).
p14b([H|T],R) :- is_list(H),!,p14a(H,R1),p14b(T,R2),R = [R1|R2].
p14b([H|T],R) :- p14b(T,R1),R=[H|R1].


%predecessor(l1..ln,R) = 
%			[], n = 0
%			[l1-1], n = 1 && l1-1 >=0
%			[l1-1+10],n=1 && l1-1 < 0
%			(l1-R) U predecessor(l2..ln,0), l1-R >= 0
%			(l1-R+10) U predecessor(l2..ln,1) l1-R<0
%predecessor(List,int,List)
%(i,o,o)
predecessor([],0,[]).  
predecessor([0],1,[9]).
predecessor([L],0,R) :- L1 is L - 1, R = [L1].
predecessor([H|T],1,R) :- predecessor(T,Re1,R1),
    H1 is H - Re1, H1 < 0,R = [9|R1].
predecessor([H|T],0,R) :- predecessor(T,Re1,R1),
    H1 is H - Re1, H1 >= 0,R = [H1|R1].
% p15a(l1..ln) = predecessor(l1..ln,0)
%p15a(List, List)
%(i,o)
p15a(R,T) :- predecessor(R,_,T).

%p15b(l1..ln) = {
%			[],n=0
%			p15a(l1) U p15b(l2..ln), l1 is list
%			l1 U p15b(l2..ln), otherwise
%p15b(List, List)
%(i,o)
p15b([],[]).
p15b([H|T],R):-is_list(H),!,p15a(H,R1),p15b(T,R2),R=[R1|R2].
p15b([H|T],R):-p15b(T,R1),R=[H|R1].


mountain([_],1,1).
mountain([H1,H2|T],_,J) :- H1 < H2, J is 0, mountain([H2|T],1,0).
mountain([H1,H2|T],I,_) :- H1 > H2, I is 1, mountain([H2|T],1,1).

removeNonMount([],[]).
removeNonMount([H|T],R):-is_list(H),mountain(H,0,0),!,removeNonMount(T,R1),R=[H|R1].
removeNonMount([H|T],R):-is_list(H),!,removeNonMount(T,R).
removeNonMount([H|T],R):-removeNonMount(T,R1),R=[H|R1].




%bacc

% candidate(l1..ln) = { 
% 				(l1, l2..ln)
% 				(e,l1 U L), (e,L) = candidate(l2..ln)
% List, List, int
% (i,o,o)
candidate([H|T],H,T).
candidate([H|T],E,R) :- candidate(T,E,R1),R=[H|R1].

% abs(R) = { 
% 			R, R > 0
% 			-R, R < 0
% int, int
% (i,o)
abs(R,P) :- R<0,P is -1*R,!.
abs(R,R).

% okay(E, l1..ln) = 
% 			true, n = 0
% 			true, n = 1 && abs(l1-E) = 1
% 			true, n > 1 && abs(l1-E) = 1
% 			okay(E, l2..ln), n > 1 && abs(l1-E) != 1
% 			false, otherwise.
% (Int, List)
% (i,i)
okay(_,[]).
okay(E,[H]):- R is E-H, abs(R,T),T is 1,!.
okay(E,[H,_|_]):- R is E-H, abs(R,T),T is 1,!.
okay(E,[_,H1|T]):- okay(E,[H1|T]).

% clist(N) = {
% 			[], N = 0
% 			N U clist(N-1)
% int, List
% (i,o)
clist(0,[]) :- !.
clist(N,[N|R]):- N1 is N - 1,clist(N1,R).

% invertList(l1..ln) = {
% 				[], n = 0
% 				invertList(l2..ln) U l1, otherwise
% (List,List,List)
% (i,i,o)
invertList([],R,R).
invertList([H|T],P,R):- invertList(T,[H|P],R). 

% backtrack(l1..ln,r1..rn) = 
% 			invertList(r1..rn), n = 0
% 			backtrack(L, e U r1..rn), (e,L) = candidate(l1..ln) && okay(e,r1..rn)
% (i,i,o)
backtrack([],R,P) :- invertList(R,[],P).
backtrack(L,R,P):- candidate(L,E,R1),okay(E,R),backtrack(R1,[E|R],P).


% main(N) = backtrack(clist(N))
% (Int, List)
% (i,o)
main(N,R) :- clist(N,R1),backtrack(R1,[],R).
